##########################
# How to access these vars
##########################
#
# These aggregated environment variables from all .env files are available at runtime under the global 'env' variable.
#
# On the CLIENT, only the variables defined here that are prefixed with IN_CLIENT_ will be available, in addition to
# NODE_ENV=development/production, RENDER_ENV=client, and ASSETS_URL=the url to get assets from.
#
# On the SERVER, if you want to override these at runtime with the ones in the current shell, do:
#
# process.env.myVar || env.myVar
#
# This will favour myVar in process.env over what is compiled. Remember that at build time, env.myVar will actually be
# substituted with the literal from these .env files. So the above code will actually look like:
#
# process.env.myVar || "someValueOfMyVar"
#
#######################
# Order of files loaded
#######################
#
# Below is a list of all the .env files that are loaded for each build type. Note that
# the files that are loaded first have the most priority, that is, the files that are loaded first
# cannot have their environment variables overridden.
#
# All .env.local.* files are ignored by git.
#
# yarn dev-myApp (or some configuration with dev=true):
#     - (file defined by additionalEnvFile in the angular.json/workspace.json configuration, if any)
#     - .env.local.development
# ----> .env.development
#     - .env.local.any
#     - .env.any
#
# yarn build-myApp (or some configuration with dev=false):
#     - (file defined by additionalEnvFile in the angular.json/workspace.json configuration, if any)
#     - .env.local.production
#     - .env.production
#     - .env.local.any
#     - .env.any
#
# yarn test-myApp (test builder):
#     - (file defined by additionalEnvFile in the angular.json/workspace.json configuration, if any)
#     - .env.local.test
#     - .env.test
#     - .env.any
#     - (note: .env.local.any is not loaded for test)

ENV_DEV=2
IN_CLIENT_ENV_X=2
